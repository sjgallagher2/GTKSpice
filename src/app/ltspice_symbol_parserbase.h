// Generated by Bisonc++ V5.02.00 on Sat, 23 Nov 2019 16:27:05 -0500

#ifndef LTSpiceSymbolParserBase_h_included
#define LTSpiceSymbolParserBase_h_included

#include <exception>
#include <vector>
#include <iostream>
// $insert preincludes
#include <string>

namespace // anonymous
{
    struct PI__;
}



class LTSpiceSymbolParserBase
{
    public:
        enum DebugMode__
        {
            OFF           = 0,
            ON            = 1 << 0,
            ACTIONCASES   = 1 << 1
        };

// $insert tokens

    // Symbolic tokens:
    enum Tokens__
    {
        STRING = 257,
        INT,
        VERSION,
        SYMBOLTYPE,
        LINE,
        RECTANGLE,
        CIRCLE,
        ARC,
        TEXT,
        WINDOW,
        SYMATTR,
        PIN,
        PINATTR,
        PINNAME,
        SPICEORDER,
    };

// $insert STYPE
union STYPE__
{
 int u_int;
 std::string* u_str;
};


    private:
        int d_stackIdx__ = -1;
        std::vector<size_t>   d_stateStack__;
        std::vector<STYPE__>  d_valueStack__;

    protected:
        enum Return__
        {
            PARSE_ACCEPT__ = 0,   // values used as parse()'s return values
            PARSE_ABORT__  = 1
        };
        enum ErrorRecovery__
        {
            DEFAULT_RECOVERY_MODE__,
            UNEXPECTED_TOKEN__,
        };
        bool        d_actionCases__ = false;
        bool        d_debug__ = true;
        size_t      d_nErrors__ = 0;
        size_t      d_requiredTokens__;
        size_t      d_acceptedTokens__;
        int         d_token__;
        int         d_nextToken__;
        size_t      d_state__;
        STYPE__    *d_vsp__;
        STYPE__     d_val__;
        STYPE__     d_nextVal__;

        LTSpiceSymbolParserBase();

        void ABORT() const;
        void ACCEPT() const;
        void ERROR() const;
        void clearin();
        bool actionCases() const;
        bool debug() const;
        void pop__(size_t count = 1);
        void push__(size_t nextState);
        void popToken__();
        void pushToken__(int token);
        void reduce__(PI__ const &productionInfo);
        void errorVerbose__();
        size_t top__() const;

    public:
        void setDebug(bool mode);
        void setDebug(DebugMode__ mode);
}; 

inline LTSpiceSymbolParserBase::DebugMode__ operator|(LTSpiceSymbolParserBase::DebugMode__ lhs, 
                                     LTSpiceSymbolParserBase::DebugMode__ rhs)
{
    return static_cast<LTSpiceSymbolParserBase::DebugMode__>(static_cast<int>(lhs) | rhs);
};

inline bool LTSpiceSymbolParserBase::debug() const
{
    return d_debug__;
}

inline bool LTSpiceSymbolParserBase::actionCases() const
{
    return d_actionCases__;
}

inline void LTSpiceSymbolParserBase::ABORT() const
{
    throw PARSE_ABORT__;
}

inline void LTSpiceSymbolParserBase::ACCEPT() const
{
    throw PARSE_ACCEPT__;
}

inline void LTSpiceSymbolParserBase::ERROR() const
{
    throw UNEXPECTED_TOKEN__;
}

inline LTSpiceSymbolParserBase::DebugMode__ operator&(LTSpiceSymbolParserBase::DebugMode__ lhs,
                                     LTSpiceSymbolParserBase::DebugMode__ rhs)
{
    return static_cast<LTSpiceSymbolParserBase::DebugMode__>(
            static_cast<int>(lhs) & rhs);
}

// For convenience, when including ParserBase.h its symbols are available as
// symbols in the class Parser, too.
#define LTSpiceSymbolParser LTSpiceSymbolParserBase


#endif


