// Generated by Bisonc++ V5.02.00 on Thu, 21 Nov 2019 11:46:54 -0500

#ifndef LTSpiceSymbolParser_h_included
#define LTSpiceSymbolParser_h_included

// $insert baseclass
#include "ltspice_symbol_parserbase.h"
// $insert scanner.h
#include "ltspice_symbol_lexer.h"
#include <memory>
#include <app/object_symbol.h>
#include <app/draw_primitives.h>
#include <fstream>
#include <cmath>


#undef LTSpiceSymbolParser
class LTSpiceSymbolParser: public LTSpiceSymbolParserBase
{
    // $insert scannerobject
    LTSpiceSymbolLexer d_scanner;
        
    public:
        LTSpiceSymbolParser(std::ifstream& inputstream,std::ostream& outputstream=std::cout)
         : d_scanner(inputstream,outputstream) {}
        int parse();
        bool symbol_available() {return savail_;}
        ObjectGeometry get_geometry() const {return ogeom_;}
        ObjectPins get_pins() const {return opins_;}

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
        bool savail_ = false; // True when symbol object is complete and available

        ObjectGeometry ogeom_;
        ObjectPins opins_;
        std::shared_ptr<ObjectSymbol> osymbol_;

};


#endif
