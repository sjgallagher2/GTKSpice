// Generated by Bisonc++ V5.02.00 on Sat, 23 Nov 2019 16:27:05 -0500

// $insert class.ih
#include "ltspice_symbol_parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {292, 0}, // 1: ltspicesymbolfile ->  <empty>
     {292, 2}, // 2: ltspicesymbolfile ('\x0a') ->  ltspicesymbolfile '\x0a'
     {292, 3}, // 3: ltspicesymbolfile ->  ltspicesymbolfile header body
     {293, 2}, // 4: header ('\x0a') ->  header '\x0a'
     {293, 2}, // 5: header ->  versionline symboltypeline
     {294, 4}, // 6: versionline (VERSION) ->  VERSION ' ' integer '\x0a'
     {295, 4}, // 7: symboltypeline (SYMBOLTYPE) ->  SYMBOLTYPE ' ' string '\x0a'
     {296, 2}, // 8: body ->  body body
     {296, 1}, // 9: body ->  lineline
     {296, 1}, // 10: body ->  rectangleline
     {296, 1}, // 11: body ->  circleline
     {296, 1}, // 12: body ->  arcline
     {296, 1}, // 13: body ->  textline
     {296, 1}, // 14: body ->  windowline
     {296, 1}, // 15: body ->  symattrline
     {296, 1}, // 16: body ->  pinlines
     {297, 12}, // 17: lineline (LINE) ->  LINE ' ' string ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {297, 14}, // 18: lineline (LINE) ->  LINE ' ' string ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {298, 12}, // 19: rectangleline (RECTANGLE) ->  RECTANGLE ' ' string ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {299, 12}, // 20: circleline (CIRCLE) ->  CIRCLE ' ' string ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {299, 14}, // 21: circleline (CIRCLE) ->  CIRCLE ' ' string ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {300, 20}, // 22: arcline (ARC) ->  ARC ' ' string ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {300, 21}, // 23: arcline (ARC) ->  ARC ' ' string integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer ' ' integer '\x0a'
     {301, 12}, // 24: textline (TEXT) ->  TEXT ' ' integer ' ' integer ' ' string ' ' integer ' ' string '\x0a'
     {302, 12}, // 25: windowline (WINDOW) ->  WINDOW ' ' integer ' ' integer ' ' integer ' ' string ' ' integer '\x0a'
     {303, 2}, // 26: symattrline ('\x0a') ->  symattrstring '\x0a'
     {304, 3}, // 27: symattrstring (' ') ->  symattrstring ' ' string
     {304, 3}, // 28: symattrstring (' ') ->  symattrstring ' ' integer
     {304, 2}, // 29: symattrstring (' ') ->  symattrstring ' '
     {304, 1}, // 30: symattrstring (SYMATTR) ->  SYMATTR
     {305, 2}, // 31: pinlines ->  pinlines pinattrline
     {305, 1}, // 32: pinlines ->  pinline
     {306, 10}, // 33: pinline (PIN) ->  PIN ' ' integer ' ' integer ' ' string ' ' integer '\x0a'
     {307, 2}, // 34: pinattrline ('\x0a') ->  pinattrpinnamestring '\x0a'
     {307, 2}, // 35: pinattrline ('\x0a') ->  pinattrspiceorderstring '\x0a'
     {308, 2}, // 36: pinattrpinnamestring (' ') ->  pinattrpinnamestring ' '
     {308, 5}, // 37: pinattrpinnamestring (PINATTR) ->  PINATTR ' ' PINNAME ' ' integer
     {308, 5}, // 38: pinattrpinnamestring (PINATTR) ->  PINATTR ' ' PINNAME ' ' string
     {309, 2}, // 39: pinattrspiceorderstring (' ') ->  pinattrspiceorderstring ' '
     {309, 5}, // 40: pinattrspiceorderstring (PINATTR) ->  PINATTR ' ' SPICEORDER ' ' integer
     {310, 1}, // 41: string (STRING) ->  STRING
     {310, 1}, // 42: string ('-') ->  '-'
     {311, 1}, // 43: integer (INT) ->  INT
     {312, 1}, // 44: ltspicesymbolfile_$ ->  ltspicesymbolfile
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {  2} },                     
    { {     292}, {  1} }, // ltspicesymbolfile
    { {       0}, { -1} },                     
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            6} },               
    { {        10}, {            2} }, // '\x0a'     
    { {       293}, {            3} }, // header     
    { {       294}, {            4} }, // versionline
    { {       259}, {            5} }, // VERSION    
    { {     _EOF_}, { PARSE_ACCEPT} },               
    { {         0}, {            0} },               
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_3[] =
{
    { { REQ_TOKEN}, { 21} },                 
    { {       296}, {  6} }, // body         
    { {        10}, {  7} }, // '\x0a'       
    { {       297}, {  8} }, // lineline     
    { {       298}, {  9} }, // rectangleline
    { {       299}, { 10} }, // circleline   
    { {       300}, { 11} }, // arcline      
    { {       301}, { 12} }, // textline     
    { {       302}, { 13} }, // windowline   
    { {       303}, { 14} }, // symattrline  
    { {       305}, { 15} }, // pinlines     
    { {       261}, { 16} }, // LINE         
    { {       262}, { 17} }, // RECTANGLE    
    { {       263}, { 18} }, // CIRCLE       
    { {       264}, { 19} }, // ARC          
    { {       265}, { 20} }, // TEXT         
    { {       266}, { 21} }, // WINDOW       
    { {       304}, { 22} }, // symattrstring
    { {       306}, { 23} }, // pinline      
    { {       267}, { 24} }, // SYMATTR      
    { {       268}, { 25} }, // PIN          
    { {         0}, {  0} },                 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       295}, { 26} }, // symboltypeline
    { {       260}, { 27} }, // SYMBOLTYPE    
    { {         0}, {  0} },                  
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 28} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_6[] =
{
    { { REQ_DEF}, { 20} },                 
    { {     296}, { 29} }, // body         
    { {     297}, {  8} }, // lineline     
    { {     298}, {  9} }, // rectangleline
    { {     299}, { 10} }, // circleline   
    { {     300}, { 11} }, // arcline      
    { {     301}, { 12} }, // textline     
    { {     302}, { 13} }, // windowline   
    { {     303}, { 14} }, // symattrline  
    { {     305}, { 15} }, // pinlines     
    { {     261}, { 16} }, // LINE         
    { {     262}, { 17} }, // RECTANGLE    
    { {     263}, { 18} }, // CIRCLE       
    { {     264}, { 19} }, // ARC          
    { {     265}, { 20} }, // TEXT         
    { {     266}, { 21} }, // WINDOW       
    { {     304}, { 22} }, // symattrstring
    { {     306}, { 23} }, // pinline      
    { {     267}, { 24} }, // SYMATTR      
    { {     268}, { 25} }, // PIN          
    { {       0}, { -3} },                 
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_15[] =
{
    { { REQ_DEF}, {   5} },                           
    { {     307}, {  30} }, // pinattrline            
    { {     308}, {  31} }, // pinattrpinnamestring   
    { {     309}, {  32} }, // pinattrspiceorderstring
    { {     269}, {  33} }, // PINATTR                
    { {       0}, { -16} },                           
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 34} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 35} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 36} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 37} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 38} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 39} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {        10}, { 40} }, // '\x0a'
    { {        32}, { 41} }, // ' '   
    { {         0}, {  0} },          
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 42} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_26[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 43} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 44} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_29[] =
{
    { { REQ_DEF}, { 20} },                 
    { {     296}, { 29} }, // body         
    { {     297}, {  8} }, // lineline     
    { {     298}, {  9} }, // rectangleline
    { {     299}, { 10} }, // circleline   
    { {     300}, { 11} }, // arcline      
    { {     301}, { 12} }, // textline     
    { {     302}, { 13} }, // windowline   
    { {     303}, { 14} }, // symattrline  
    { {     305}, { 15} }, // pinlines     
    { {     261}, { 16} }, // LINE         
    { {     262}, { 17} }, // RECTANGLE    
    { {     263}, { 18} }, // CIRCLE       
    { {     264}, { 19} }, // ARC          
    { {     265}, { 20} }, // TEXT         
    { {     266}, { 21} }, // WINDOW       
    { {     304}, { 22} }, // symattrstring
    { {     306}, { 23} }, // pinline      
    { {     267}, { 24} }, // SYMATTR      
    { {     268}, { 25} }, // PIN          
    { {       0}, { -8} },                 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {        10}, { 46} }, // '\x0a'
    { {        32}, { 47} }, // ' '   
    { {         0}, {  0} },          
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {        10}, { 48} }, // '\x0a'
    { {        32}, { 49} }, // ' '   
    { {         0}, {  0} },          
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 50} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       310}, { 51} }, // string
    { {       257}, { 52} }, // STRING
    { {        45}, { 53} }, // '-'   
    { {         0}, {  0} },          
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       310}, { 54} }, // string
    { {       257}, { 52} }, // STRING
    { {        45}, { 53} }, // '-'   
    { {         0}, {  0} },          
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       310}, { 55} }, // string
    { {       257}, { 52} }, // STRING
    { {        45}, { 53} }, // '-'   
    { {         0}, {  0} },          
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       310}, { 56} }, // string
    { {       257}, { 52} }, // STRING
    { {        45}, { 53} }, // '-'   
    { {         0}, {  0} },          
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 57} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 58} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_41[] =
{
    { { REQ_DEF}, {   6} },           
    { {     310}, {  59} }, // string 
    { {     311}, {  60} }, // integer
    { {     257}, {  52} }, // STRING 
    { {      45}, {  53} }, // '-'    
    { {     258}, {  45} }, // INT    
    { {       0}, { -29} },           
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 61} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       310}, { 62} }, // string
    { {       257}, { 52} }, // STRING
    { {        45}, { 53} }, // '-'   
    { {         0}, {  0} },          
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 63} }, // '\x0a'
    { {         0}, {  0} },          
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       270}, { 64} }, // PINNAME   
    { {       271}, { 65} }, // SPICEORDER
    { {         0}, {  0} },              
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 66} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 67} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 68} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {  4} },           
    { {        32}, { 69} }, // ' '    
    { {       311}, { 70} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 71} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 72} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 73} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 74} }, // '\x0a'
    { {         0}, {  0} },          
};

SR__ s_63[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 75} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 76} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 77} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 78} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 79} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 80} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 81} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 82} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 83} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 84} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_74[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  6} },           
    { {       311}, { 85} }, // integer
    { {       310}, { 86} }, // string 
    { {       258}, { 45} }, // INT    
    { {       257}, { 52} }, // STRING 
    { {        45}, { 53} }, // '-'    
    { {         0}, {  0} },           
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 87} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 88} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 89} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 90} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 91} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 92} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 93} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 94} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        32}, { 95} }, // ' '
    { {         0}, {  0} },       
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 96} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 97} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 98} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       311}, { 99} }, // integer
    { {       258}, { 45} }, // INT    
    { {         0}, {  0} },           
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 100} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   4} },          
    { {       310}, { 101} }, // string
    { {       257}, {  52} }, // STRING
    { {        45}, {  53} }, // '-'   
    { {         0}, {   0} },          
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 102} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {   4} },          
    { {       310}, { 103} }, // string
    { {       257}, {  52} }, // STRING
    { {        45}, {  53} }, // '-'   
    { {         0}, {   0} },          
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 104} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 105} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 106} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 107} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 108} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 109} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 110} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 111} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 112} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 113} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 114} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 115} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 116} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 117} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {   4} },          
    { {       310}, { 118} }, // string
    { {       257}, {  52} }, // STRING
    { {        45}, {  53} }, // '-'   
    { {         0}, {   0} },          
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 119} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 120} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 121} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 122} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 123} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 124} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 125} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 126} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 127} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 128} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 129} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 130} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 131} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 132} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {   4} },          
    { {       310}, { 133} }, // string
    { {       257}, {  52} }, // STRING
    { {        45}, {  53} }, // '-'   
    { {         0}, {   0} },          
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 134} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {        10}, { 135} }, // '\x0a'
    { {        32}, { 136} }, // ' '   
    { {         0}, {   0} },          
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 137} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {        10}, { 138} }, // '\x0a'
    { {        32}, { 139} }, // ' '   
    { {         0}, {   0} },          
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 140} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_132[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 141} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 142} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 143} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 144} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 145} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 146} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 147} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 148} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 149} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 150} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 151} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 152} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_151[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 153} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 154} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 155} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 156} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 157} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 158} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 159} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_158[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 160} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        32}, { 161} }, // ' '
    { {         0}, {   0} },       
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 162} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       311}, { 163} }, // integer
    { {       258}, {  45} }, // INT    
    { {         0}, {   0} },           
};

SR__ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 164} }, // '\x0a'
    { {         0}, {   0} },          
};

SR__ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,
};

} // anonymous namespace ends




// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

LTSpiceSymbolParserBase::LTSpiceSymbolParserBase()
:
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void LTSpiceSymbolParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void LTSpiceSymbolParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

void LTSpiceSymbolParser::print__()
{
// $insert print
}

void LTSpiceSymbolParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void LTSpiceSymbolParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack__.size();
    if (static_cast<size_t>(d_stackIdx__ + 1) == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack__.resize(newSize);
        if (d_valueStack__.capacity() >= newSize)
            d_valueStack__.resize(newSize);
        else
        {
            std::vector<STYPE__> enlarged(newSize);
            for (size_t idx = 0; idx != currentSize; ++idx)
                enlarged[idx] = std::move(d_valueStack__[idx]);
            d_valueStack__.swap(enlarged);
        }
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = std::move(d_val__);
}

void LTSpiceSymbolParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = std::move(d_nextVal__);
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void LTSpiceSymbolParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = std::move(d_val__);
    d_token__ = token;
}
     
void LTSpiceSymbolParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t LTSpiceSymbolParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void LTSpiceSymbolParser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 96 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-1];
        }
        break;

        case 3:
#line 98 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         delete d_vsp__[-1].u_str;
         }
        break;

        case 4:
#line 107 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-1];
        }
        break;

        case 5:
#line 109 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = new std::string( *(d_vsp__[-1].u_str) + *(d_vsp__[0].u_str) );
         delete d_vsp__[-1].u_str;
         delete d_vsp__[0].u_str;
         }
        break;

        case 6:
#line 117 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = new std::string("Version "+std::to_string(d_vsp__[-1].u_int)+"\n");
         }
        break;

        case 7:
#line 123 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = new std::string("SymbolType "+*(d_vsp__[-1].u_str)+"\n");
         delete d_vsp__[-1].u_str;
         }
        break;

        case 8:
#line 132 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 9:
#line 137 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 10:
#line 139 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 11:
#line 141 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 12:
#line 143 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 13:
#line 145 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 14:
#line 147 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 15:
#line 149 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 16:
#line 151 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 17:
#line 155 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         std::shared_ptr<LinePrimitive> line = std::make_shared<LinePrimitive>();
         line->start(Coordinate((d_vsp__[-7].u_int)/3.0,(d_vsp__[-5].u_int)/3.0));
         line->end(Coordinate((d_vsp__[-3].u_int)/3.0,(d_vsp__[-1].u_int)/3.0));
         ogeom_.push_back(line);
         }
        break;

        case 18:
#line 164 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         
         std::shared_ptr<LinePrimitive> line = std::make_shared<LinePrimitive>();
         line->start(Coordinate((d_vsp__[-9].u_int)/3.0,(d_vsp__[-7].u_int)/3.0));
         line->end(Coordinate((d_vsp__[-5].u_int)/3.0,(d_vsp__[-3].u_int)/3.0));
         ogeom_.push_back(line);
         }
        break;

        case 19:
#line 175 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         std::shared_ptr<RectPrimitive> rect = std::make_shared<RectPrimitive>();
         rect->anchor(Coordinate((d_vsp__[-7].u_int)/3.0, (d_vsp__[-5].u_int)/3.0));
         rect->height((d_vsp__[-1].u_int-d_vsp__[-5].u_int)/3.0);
         rect->width((d_vsp__[-3].u_int-d_vsp__[-7].u_int)/3.0);
         ogeom_.push_back(rect);
         }
        break;

        case 20:
#line 186 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         std::shared_ptr<CirclePrimitive> circ = std::make_shared<CirclePrimitive>();
         circ->hradius( (d_vsp__[-3].u_int - d_vsp__[-7].u_int)/6.0 );
         circ->vradius((d_vsp__[-1].u_int-d_vsp__[-5].u_int)/6.0);
         circ->center( Coordinate( (d_vsp__[-7].u_int)/3.0 + circ->hradius(), (d_vsp__[-5].u_int)/3.0 + circ->vradius() ));
         ogeom_.push_back(circ);
         }
        break;

        case 21:
#line 196 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         std::shared_ptr<CirclePrimitive> circ = std::make_shared<CirclePrimitive>();
         circ->hradius( (d_vsp__[-5].u_int - d_vsp__[-9].u_int)/6.0 );
         circ->vradius((d_vsp__[-3].u_int-d_vsp__[-7].u_int)/6.0);
         circ->center( Coordinate( (d_vsp__[-9].u_int)/3.0 + circ->hradius(), (d_vsp__[-7].u_int)/3.0 + circ->vradius() ));
         ogeom_.push_back(circ);
         }
        break;

        case 22:
#line 207 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         
         std::shared_ptr<ArcPrimitive> arc = std::make_shared<ArcPrimitive>();
         arc->hradius( (d_vsp__[-11].u_int-d_vsp__[-15].u_int) / 6.0 );
         arc->vradius((d_vsp__[-9].u_int-d_vsp__[-13].u_int) / 6.0);
         arc->center( Coordinate( (d_vsp__[-15].u_int) / 3.0 + arc->hradius(), (d_vsp__[-13].u_int) / 3.0 + arc->vradius() ));
         
         
         Coordinate p1_abs((d_vsp__[-7].u_int)/3.0 - arc->center().x(), (d_vsp__[-5].u_int)/3.0 - arc->center().y());
         Coordinate p2_abs((d_vsp__[-3].u_int)/3.0 - arc->center().x(), (d_vsp__[-1].u_int)/3.0 - arc->center().y());
         float angle1 = std::atan2(p1_abs.y(),p1_abs.x()) / M_PI*180.0;
         float angle2 = std::atan2(p2_abs.y(),p2_abs.x()) / M_PI*180.0;
         
         arc->set_start_angle_degrees(angle2); 
         arc->set_end_angle_degrees(angle1);
         ogeom_.push_back(arc);
         }
        break;

        case 23:
#line 230 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 24:
#line 236 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 25:
#line 242 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 26:
#line 248 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 27:
#line 254 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-2];
        }
        break;

        case 28:
#line 256 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-2];
        }
        break;

        case 29:
#line 258 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-1];
        }
        break;

        case 30:
#line 260 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[0];
        }
        break;

        case 31:
#line 264 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 32:
#line 269 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         }
        break;

        case 33:
#line 276 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         std::shared_ptr<SymbolPin> pin1 = std::make_shared<SymbolPin>();
         pin1->pin_location(Coordinate((d_vsp__[-7].u_int)/3.0,(d_vsp__[-5].u_int)/3.0));
         opins_.push_back(pin1);
         }
        break;

        case 34:
#line 286 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         if(!opins_.empty())
         (*(opins_.end()-1))->set_attribute_value("NAME",*(d_vsp__[-1].u_str));
         else
         std::cout << "WARNING: Pin attribute found but no pins added.\n";
         }
        break;

        case 35:
#line 295 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = nullptr;
         if(!opins_.empty())
         (*(opins_.end()-1))->set_attribute_value("SPICE_ORDER",std::to_string(d_vsp__[-1].u_int));
         else
         std::cout << "WARNING: Pin attribute found but no pins added.\n";
         }
        break;

        case 36:
#line 306 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-1];
        }
        break;

        case 37:
#line 308 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = new std::string(std::to_string(d_vsp__[0].u_int));
         }
        break;

        case 38:
#line 313 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = d_vsp__[0].u_str;
         }
        break;

        case 39:
#line 320 "ltspice_symbol_parser.y"
        {
            d_val__ = d_vsp__[-1];
        }
        break;

        case 40:
#line 322 "ltspice_symbol_parser.y"
        {
         d_val__.u_int = d_vsp__[0].u_int;
         }
        break;

        case 41:
#line 331 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = d_scanner.strVal();
         }
        break;

        case 42:
#line 336 "ltspice_symbol_parser.y"
        {
         d_val__.u_str = d_scanner.strVal();
         }
        break;

        case 43:
#line 342 "ltspice_symbol_parser.y"
        {
         d_val__.u_int = d_scanner.intVal();
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void LTSpiceSymbolParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void LTSpiceSymbolParser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int LTSpiceSymbolParser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void LTSpiceSymbolParser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int LTSpiceSymbolParser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



