// Generated by Flexc++ V2.05.00 on Thu, 21 Nov 2019 11:47:25 -0500

#ifndef LTSpiceSymbolLexer_H_INCLUDED_
#define LTSpiceSymbolLexer_H_INCLUDED_

// $insert baseclass_h
#include "ltspice_symbol_lexerbase.h"

// $insert classHead
class LTSpiceSymbolLexer: public LTSpiceSymbolLexerBase
{
    public:
        explicit LTSpiceSymbolLexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        LTSpiceSymbolLexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();
        // Additional data-storage methods -SJG
        void intVal(int i) {ival_ = i;}
        int intVal() const {return ival_;}
        void strVal(std::string s) {sval_ = s;}
        std::string* strVal() const {return new std::string(sval_);}

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
        
        // Additional data -SJG
        int ival_ = -1;
        std::string sval_ = "";
        int once_ = 0;
};

// $insert scannerConstructors
inline LTSpiceSymbolLexer::LTSpiceSymbolLexer(std::istream &in, std::ostream &out)
:
    LTSpiceSymbolLexerBase(in, out)
{}

inline LTSpiceSymbolLexer::LTSpiceSymbolLexer(std::string const &infile, std::string const &outfile)
:
    LTSpiceSymbolLexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int LTSpiceSymbolLexer::lex()
{
    return lex__();
}

inline void LTSpiceSymbolLexer::preCode() 
{
    // optionally replace by your own code
}

inline void LTSpiceSymbolLexer::postCode(PostEnum__ type) 
{
    // optionally replace by your own code
}

inline void LTSpiceSymbolLexer::print() 
{
    print__();
}


#endif // LTSpiceSymbolLexer_H_INCLUDED_

