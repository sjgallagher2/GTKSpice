// Generated by Flexc++ V2.05.00 on Thu, 21 Nov 2019 14:36:02 -0500

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "ltspice_symbol_lexer.ih"


    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const LTSpiceSymbolLexerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9,10,10,
    10,10,10,10,10,10,10,10,11,11,12,12,12,13,14,15,15,15,15,15,15,15,15,15,15,
    15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,17,18,18,18,19,20,21,22,
    23,24,25,26,27,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,45,
    45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
    45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
    45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
    45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
    45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
    45,45,45,45,45,45,
};

    // s_dfa__ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition__ is defined in the baseclass header
    // StartCondition__::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase__ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const LTSpiceSymbolLexerBase::s_dfa__[][49] =
{
    // INITIAL
    {-1, 1, 2,-1, 1, 3,-1, 4,-1, 3, 5,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          6, 3, 7, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 9, 3,10,11,12, 3,
         13,14, 3, 3, 3,-1,15,    -1, -1},  // 0
    {-1, 1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,     1, -1},  // 1
    {-1,-1, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,    15, -1},  // 2
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 3
    {-1,-1,-1,-1,16,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,    16, -1},  // 5
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,17, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 6
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3,18, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 7
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 8
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3,20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 9
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,21, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 10
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3,22, 3,-1,-1,    13, -1},  // 11
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 12
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,24, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 13
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3,25, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,     0, -1},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,    14, -1},  // 16
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3,26, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 17
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,27, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 18
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,28, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 19
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,29, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 20
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3,30, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 21
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,31, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 22
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3,32, 3, 3,-1,-1,    13, -1},  // 23
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,33, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 24
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,34, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 25
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     7, -1},  // 26
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3,35, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 27
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,36, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 28
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
         37, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    11, -1},  // 29
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,38, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 30
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
         39,40, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 31
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,41, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 32
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,42, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 33
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3,43, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 34
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,44, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 35
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     4, -1},  // 36
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,45, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 37
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
         46, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 38
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,47, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 39
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,48, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 40
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     8, -1},  // 41
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3,49, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 42
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,50, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 43
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,51, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 44
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,52, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 45
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,53, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 46
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,54, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 47
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,55, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 48
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,56, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 49
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3,57, 3, 3, 3,-1,-1,    13, -1},  // 50
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     6, -1},  // 51
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,58, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 52
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3,59, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 53
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,60, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 54
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,61, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 55
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,62, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 56
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     9, -1},  // 57
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    12, -1},  // 58
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,63, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 59
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    10, -1},  // 60
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3,64, 3,-1,-1,    13, -1},  // 61
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     2, -1},  // 62
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,65, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 63
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,66, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 64
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     5, -1},  // 65
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3,67, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,    13, -1},  // 66
    {-1,-1,-1,-1,-1, 3,-1, 3, 3, 3, 3,-1, 3,-1, 3,-1, 3,-1, 3,-1,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3,-1,-1,     3, -1},  // 67
};


int const (*LTSpiceSymbolLexerBase::s_dfaBase__[])[49] =
{
    s_dfa__ + 0,
};

size_t LTSpiceSymbolLexerBase::s_istreamNr = 0;

// $insert inputImplementation
LTSpiceSymbolLexerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

LTSpiceSymbolLexerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t LTSpiceSymbolLexerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t LTSpiceSymbolLexerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void LTSpiceSymbolLexerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void LTSpiceSymbolLexerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

LTSpiceSymbolLexerBase::LTSpiceSymbolLexerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

void LTSpiceSymbolLexerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
}


LTSpiceSymbolLexerBase::LTSpiceSymbolLexerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void LTSpiceSymbolLexerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void LTSpiceSymbolLexerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void LTSpiceSymbolLexerBase::setDebug(bool onOff)
{}

bool LTSpiceSymbolLexerBase::debug() const
{
    return false;
}

void LTSpiceSymbolLexerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void LTSpiceSymbolLexerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void LTSpiceSymbolLexerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_atBOL = true;
}

void LTSpiceSymbolLexerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void LTSpiceSymbolLexerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void LTSpiceSymbolLexerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void LTSpiceSymbolLexerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_atBOL = true;
}

bool LTSpiceSymbolLexerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();

    return true;
}

// $insert lopImplementation
void LTSpiceSymbolLexerBase::lopf__(size_t tail)
{
    tail = length() - tail;
    push(d_matched.substr(tail, std::string::npos));
    d_matched.resize(tail);
    d_atBOL = length() && d_matched.back() == '\n';
}


  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
LTSpiceSymbolLexerBase::ActionType__ LTSpiceSymbolLexerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType__::MATCH;         

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void LTSpiceSymbolLexerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void LTSpiceSymbolLexerBase::setMatchedSize(size_t length)
{
    d_input.reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t LTSpiceSymbolLexerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t LTSpiceSymbolLexerBase::getRange__(int ch)       // using int to prevent casts
{
// $insert caseCheck
    ch = tolower(ch);

    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void LTSpiceSymbolLexerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void LTSpiceSymbolLexerBase::echoCh__(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void LTSpiceSymbolLexerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void LTSpiceSymbolLexerBase::updateFinals__()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase__[d_state] + s_finIdx__;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void LTSpiceSymbolLexerBase::reset__()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int LTSpiceSymbolLexer::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 11 "ltspice_symbol_lexfile.l"
            {return once_++ ? 0 : '\n';}
        }
        break;
        case 1:
        {
#line 12 "ltspice_symbol_lexfile.l"
            return ' ';
        }
        break;
        case 2:
        {
#line 15 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::VERSION;}
        }
        break;
        case 3:
        {
#line 16 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::SYMBOLTYPE;}
        }
        break;
        case 4:
        {
#line 17 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::LINE;}
        }
        break;
        case 5:
        {
#line 18 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::RECTANGLE;}
        }
        break;
        case 6:
        {
#line 19 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::CIRCLE;}
        }
        break;
        case 7:
        {
#line 20 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::ARC;}
        }
        break;
        case 8:
        {
#line 21 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::TEXT;}
        }
        break;
        case 9:
        {
#line 22 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::WINDOW;}
        }
        break;
        case 10:
        {
#line 23 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::SYMATTR;}
        }
        break;
        case 11:
        {
#line 24 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::PIN;}
        }
        break;
        case 12:
        {
#line 25 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::PINATTR;}
        }
        break;
        case 13:
        {
#line 28 "ltspice_symbol_lexfile.l"
            {sval_ = matched(); return LTSpiceSymbolParser::STRING;}
        }
        break;
        case 15:
        {
#line 30 "ltspice_symbol_lexfile.l"
            return matched()[0];
        }
        break;
        case 16:
        {
#line 33 "ltspice_symbol_lexfile.l"
            {ival_ = std::stoi(matched()); return LTSpiceSymbolParser::INT;}
        }
        break;
        case 14:
        {
#line 29 "ltspice_symbol_lexfile.l"
            lopf__(1);
            {sval_ = matched(); return LTSpiceSymbolParser::STRING;}
        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int LTSpiceSymbolLexer::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        updateFinals__();                    // update the state's Final info

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    postCode(PostEnum__::RETURN);
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum__::END);
                     return 0;
                }
                postCode(PostEnum__::POP);
             continue;
        } // switch

        postCode(PostEnum__::WIP);

        reset__();
        preCode();
    } // while
}

void LTSpiceSymbolLexerBase::print__() const
{
}


